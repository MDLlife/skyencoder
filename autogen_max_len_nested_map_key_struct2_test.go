// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package skyencoder

import (
	"errors"
	"math"

	"github.com/skycoin/skycoin/src/cipher/encoder"
)

// EncodeSizeMaxLenNestedMapKeyStruct2 computes the size of an encoded object of type MaxLenNestedMapKeyStruct2
func EncodeSizeMaxLenNestedMapKeyStruct2(obj *MaxLenNestedMapKeyStruct2) int {
	i0 := 0

	// obj.Foo
	i0 += 4
	for k, _ := range obj.Foo {
		i1 := 0

		// k.Foo
		i1 += 4 + len(k.Foo)

		// v
		i1 += 8

		i0 += i1
	}

	return i0
}

// EncodeMaxLenNestedMapKeyStruct2 encodes an object of type MaxLenNestedMapKeyStruct2 to the buffer in encoder.Encoder
func EncodeMaxLenNestedMapKeyStruct2(e *encoder.Encoder, obj *MaxLenNestedMapKeyStruct2) error {

	// obj.Foo

	// obj.Foo length check
	if len(obj.Foo) > math.MaxUint32 {
		return errors.New("obj.Foo length exceeds math.MaxUint32")
	}

	// obj.Foo length
	e.Uint32(uint32(len(obj.Foo)))

	for k, v := range obj.Foo {

		// k.Foo maxlen check
		if len(k.Foo) > 4 {
			return encoder.ErrMaxLenExceeded
		}

		// k.Foo length check
		if len(k.Foo) > math.MaxUint32 {
			return errors.New("k.Foo length exceeds math.MaxUint32")
		}

		// k.Foo
		e.ByteSlice([]byte(k.Foo))

		// v
		e.Int64(v)

	}

	return nil
}

// DecodeMaxLenNestedMapKeyStruct2 decodes an object of type MaxLenNestedMapKeyStruct2 from the buffer in encoder.Decoder
func DecodeMaxLenNestedMapKeyStruct2(d *encoder.Decoder, obj *MaxLenNestedMapKeyStruct2) error {
	{
		// obj.Foo

		ul, err := d.Uint32()
		if err != nil {
			return err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return encoder.ErrBufferUnderflow
		}

		if length != 0 {
			obj.Foo = make(map[MaxLenStringStruct2]int64)

			for counter := 0; counter < length; counter++ {
				var k1 MaxLenStringStruct2

				{
					// k1.Foo

					ul, err := d.Uint32()
					if err != nil {
						return err
					}

					length := int(ul)
					if length < 0 || length > len(d.Buffer) {
						return encoder.ErrBufferUnderflow
					}

					if length > 4 {
						return encoder.ErrMaxLenExceeded
					}

					k1.Foo = string(d.Buffer[:length])
					d.Buffer = d.Buffer[length:]
				}

				if _, ok := obj.Foo[k1]; ok {
					return encoder.ErrMapDuplicateKeys
				}

				var v1 int64

				{
					// v1
					i, err := d.Int64()
					if err != nil {
						return err
					}
					v1 = i
				}

				obj.Foo[k1] = v1
			}
		}
	}

	if len(d.Buffer) != 0 {
		return encoder.ErrRemainingBytes
	}

	return nil
}
