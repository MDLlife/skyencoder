// Code generated by github.com/skycoin/skyencoder. DO NOT EDIT.
package skyencoder

import (
	"errors"
	"math"

	"github.com/skycoin/skycoin/src/cipher/encoder"
)

// EncodeSizeOmitEmptyMaxLenStruct1 computes the size of an encoded object of type OmitEmptyMaxLenStruct1
func EncodeSizeOmitEmptyMaxLenStruct1(obj *OmitEmptyMaxLenStruct1) int {
	i0 := 0

	// obj.Foo
	i0 += 4 + len(obj.Foo)

	// omitempty
	if len(obj.Extra) != 0 {

		// obj.Extra
		i0 += 4 + len(obj.Extra)

	}

	return i0
}

// EncodeOmitEmptyMaxLenStruct1 encodes an object of type OmitEmptyMaxLenStruct1 to the buffer in encoder.Encoder
func EncodeOmitEmptyMaxLenStruct1(e *encoder.Encoder, obj *OmitEmptyMaxLenStruct1) error {

	// obj.Foo length check
	if len(obj.Foo) > math.MaxUint32 {
		return errors.New("obj.Foo length exceeds math.MaxUint32")
	}

	// obj.Foo
	e.ByteSlice([]byte(obj.Foo))

	// omitempty
	if len(obj.Extra) != 0 {

		// obj.Extra maxlen check
		if len(obj.Extra) > 3 {
			return encoder.ErrMaxLenExceeded
		}

		// obj.Extra length check
		if len(obj.Extra) > math.MaxUint32 {
			return errors.New("obj.Extra length exceeds math.MaxUint32")
		}

		// obj.Extra length
		e.Uint32(uint32(len(obj.Extra)))

		// obj.Extra copy
		e.CopyBytes(obj.Extra)

	}

	return nil
}

// DecodeOmitEmptyMaxLenStruct1 decodes an object of type OmitEmptyMaxLenStruct1 from the buffer in encoder.Decoder
func DecodeOmitEmptyMaxLenStruct1(d *encoder.Decoder, obj *OmitEmptyMaxLenStruct1) error {
	{
		// obj.Foo

		ul, err := d.Uint32()
		if err != nil {
			return err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return encoder.ErrBufferUnderflow
		}

		obj.Foo = string(d.Buffer[:length])
		d.Buffer = d.Buffer[length:]
	}

	{
		// obj.Extra

		if len(d.Buffer) == 0 {
			return nil
		}

		ul, err := d.Uint32()
		if err != nil {
			return err
		}

		length := int(ul)
		if length < 0 || length > len(d.Buffer) {
			return encoder.ErrBufferUnderflow
		}

		if length > 3 {
			return encoder.ErrMaxLenExceeded
		}

		if length != 0 {
			obj.Extra = make([]byte, length)

			copy(obj.Extra[:], d.Buffer[:length])
			d.Buffer = d.Buffer[length:]
		}
	}

	if len(d.Buffer) != 0 {
		return encoder.ErrRemainingBytes
	}

	return nil
}
